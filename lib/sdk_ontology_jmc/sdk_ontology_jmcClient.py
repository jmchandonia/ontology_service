# -*- coding: utf-8 -*-
############################################################
#
# Autogenerated by the KBase type compiler -
# any changes made here will be overwritten
#
############################################################

from __future__ import print_function
# the following is a hack to get the baseclient to import whether we're in a
# package or not. This makes pep8 unhappy hence the annotations.
try:
    # baseclient and this client are in a package
    from .baseclient import BaseClient as _BaseClient  # @UnusedImport
except:
    # no they aren't
    from baseclient import BaseClient as _BaseClient  # @Reimport


class sdk_ontology_jmc(object):

    def __init__(
            self, url=None, timeout=30 * 60, user_id=None,
            password=None, token=None, ignore_authrc=False,
            trust_all_ssl_certificates=False,
            auth_svc='https://kbase.us/services/authorization/Sessions/Login'):
        if url is None:
            raise ValueError('A url is required')
        self._service_ver = None
        self._client = _BaseClient(
            url, timeout=timeout, user_id=user_id, password=password,
            token=token, ignore_authrc=ignore_authrc,
            trust_all_ssl_certificates=trust_all_ssl_certificates,
            auth_svc=auth_svc)

    def list_ontology_terms(self, params, context=None):
        """
        :param params: instance of type "ListOntologyTermsParams" (workspace
           - the name of the workspace for input/output ontology_dictionary -
           reference to ontology dictionary) -> structure: parameter
           "ontology_dictionary_ref" of String
        :returns: instance of type "OntologyTermsOut" -> structure: parameter
           "ontology" of String, parameter "namespace" of String, parameter
           "term_id" of list of String
        """
        return self._client.call_method(
            'sdk_ontology_jmc.list_ontology_terms',
            [params], self._service_ver, context)

    def ontology_overview(self, params, context=None):
        """
        :param params: instance of type "OntologyOverviewParams" (Ontology
           overview) -> structure: parameter "ontology_dictionary_ref" of
           list of String
        :returns: instance of type "OntologyOverviewOut" -> structure:
           parameter "dictionaries_meta" of list of type "overViewInfo" ->
           structure: parameter "ontology" of String, parameter "namespace"
           of String, parameter "data_version" of String, parameter
           "format_version" of String, parameter "number_of_terms" of Long,
           parameter "dictionary_ref" of String
        """
        return self._client.call_method(
            'sdk_ontology_jmc.ontology_overview',
            [params], self._service_ver, context)

    def list_public_ontologies(self, context=None):
        """
        :returns: instance of type "public_ontologies" (List public
           ontologies) -> list of String
        """
        return self._client.call_method(
            'sdk_ontology_jmc.list_public_ontologies',
            [], self._service_ver, context)

    def list_public_translations(self, context=None):
        """
        :returns: instance of type "public_translations" (List public
           translations) -> list of String
        """
        return self._client.call_method(
            'sdk_ontology_jmc.list_public_translations',
            [], self._service_ver, context)

    def get_ontology_terms(self, params, context=None):
        """
        :param params: instance of type "GetOntologyTermsParams" (get
           ontology terms) -> structure: parameter "ontology_dictionary_ref"
           of String, parameter "term_ids" of list of String
        :returns: instance of type "GetOntologyTermsOut" -> structure:
           parameter "term_info" of mapping from String to list of String
        """
        return self._client.call_method(
            'sdk_ontology_jmc.get_ontology_terms',
            [params], self._service_ver, context)

    def get_equivalent_terms(self, params, context=None):
        """
        :param params: instance of type "GetEqTermsParams" (get equivalent
           terms) -> structure: parameter "ontology_trans_ref" of String,
           parameter "term_ids" of list of String
        :returns: instance of type "GetEqTermsOut" -> structure: parameter
           "term_info_list" of mapping from String to list of String
        """
        return self._client.call_method(
            'sdk_ontology_jmc.get_equivalent_terms',
            [params], self._service_ver, context)

    def annotationtogo(self, params, context=None):
        """
        :param params: instance of type "ElectronicAnnotationParams"
           (workspace - the name of the workspace for input/output
           input_genome - reference to the input genome object
           ontology_translation - optional reference to user specified
           ontology translation map output_genome - the name of the mapped
           genome annotation object @optional ontology_translation) ->
           structure: parameter "workspace" of String, parameter
           "input_genome" of String, parameter "ontology_translation" of
           String, parameter "translation_behavior" of String, parameter
           "custom_translation" of String, parameter "clear_existing" of
           String, parameter "output_genome" of String
        :returns: instance of type "ElectronicAnnotationResults" ->
           structure: parameter "report_name" of String, parameter
           "report_ref" of String, parameter "output_genome_ref" of String,
           parameter "n_total_features" of Long, parameter
           "n_features_mapped" of Long
        """
        return self._client.call_method(
            'sdk_ontology_jmc.annotationtogo',
            [params], self._service_ver, context)

    def status(self, context=None):
        return self._client.call_method('sdk_ontology_jmc.status',
                                        [], self._service_ver, context)
